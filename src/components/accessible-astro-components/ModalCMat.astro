---
const {
  triggerId,
  title,
  closeText = 'Close'
} = Astro.props
---

<div class="modal" role="dialog" aria-labelledby={triggerId}>
  <div class="modal__inner">
    <div class="modal__title">
      <h3 tabindex="-1">
        {title}
      </h3>
      <button class="close">&times;</button>
    </div>
    <div class="modal__content">
      <slot />
    </div>
  </div>
</div>

<script type="module">
  // variables
  const body = document.querySelector('body')
  const modal = document.querySelector('.modal')
  const modalId = modal.getAttribute('aria-labelledby')
  const modalCloseButton = modal.querySelector('.modal__title button')
  const modalTrigger = document.querySelector(`#${modalId}`)
  
  // functions
  const teleportToRoot = element => {
    element.remove()
    body.appendChild(element)
  }

  const getKeyboardFocusableElements = element => {
    return [...element.querySelectorAll(
      'a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])'
    )]
      .filter(el => !el.hasAttribute('disabled'))
  }

  const trapFocus = event => {
    const focusables = getKeyboardFocusableElements(modal)
    const firstFocusable = focusables[0]
    const lastFocusable = focusables[focusables.length - 1]

    if (document.activeElement === lastFocusable && event.key === 'Tab' && !event.shiftKey) {
      event.preventDefault()
      firstFocusable.focus()
    }

    if (document.activeElement === firstFocusable && event.key === 'Tab' && event.shiftKey) {
      event.preventDefault()
      lastFocusable.focus()
    }
  }

  const openModal = _ => {
    const modalTitle = modal.querySelector('.modal__title')

    modal.classList.add('show')
    body.classList.add('modal-is-active')
    modalTrigger.blur();
    modalTitle.focus()
    document.addEventListener('keydown', trapFocus)

    modal.addEventListener('keydown', event => {
      if (event.key === 'Escape') {
        closeModal()
      }
    })
  }

  const closeModal = _ => {
    modal.classList.remove('show')
    body.classList.remove('modal-is-active')
    document.removeEventListener('keydown', trapFocus)
  }
  
  // execution
  teleportToRoot(modal);
  
  modalTrigger.addEventListener('click', openModal);

  modalCloseButton.addEventListener('click', closeModal)

  modal.addEventListener('click', event => { 
    if (!event.target.closest('.modal__inner')) {
      closeModal()
    }
  })

  window.closeModal = closeModal
</script>

<style lang="scss" is:global>
  body.modal-is-active > *:not(.modal) {
    filter: blur(6px);
  }

  .modal {
    height: 0;
    position: fixed;
    visibility: hidden;
    z-index: -10;
    overflow-y: inherit;
    &.show {
      display: grid;
      place-items: center;
      visibility: visible;
      height: auto;
      background-color: rgba(0, 0, 0, 0.5);
      inset: 0;
      z-index: 10;

      .modal__inner {
        opacity: 1;
      }
    }
  }

  .modal__inner {
    width: clamp(30ch, 70%, 75ch);
    border: 0.15rem solid black;
    border-radius: 0.4rem;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .modal__inner input{
    background-color: var(--background-input);
  }
  
  .darkmode ::-webkit-calendar-picker-indicator { 
    filter: invert(1)
  }

  .modal__title{
    background-color: var(--background);
    display: flex;
    justify-content: space-between;
    padding: 1rem 2rem 0rem 2rem;
  }

  .modal__title button{
    padding: 0;
    float: right;
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1;
    color: var(--font-color);
    text-shadow: 0 1px 0 #fff;
    opacity: .5;
    border: none;
  }

  .modal__content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 0rem 2rem 2rem 2rem;
    background-color: var(--background);
  }

</style>
