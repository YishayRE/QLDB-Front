---
import NoLoginLayout from '../layouts/NoLoginLayout.astro'
---

<NoLoginLayout title="Historico">
  <section>
    <h1 id="titulo">Historico con error</h1><br>
    <p id="descripcion" class="size-20">Error</p>
  </section>
  <section class="margin-32">
    <div id="chartdiv" style="width: 100%;">
    </div>
  </section>
</NoLoginLayout>

<script is:inline src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/plugins/forceDirected.js"></script>
<script>
  const titulo = document.getElementById('titulo');
  const descripcion = document.getElementById('descripcion');
  const params = window.location.search;
  const param = params.split('&');
  const id = param[0].split('=')[1];
  const tipo = param[1].split('=')[1];
  console.log(id, tipo);

  const myHeaders = new Headers();
  myHeaders.append("id", id);
  myHeaders.append("Access-Control-Allow-Origin", "*");
  myHeaders.append("Access-Control-Allow-Credentials", "true");
  myHeaders.append("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  myHeaders.append("Vary", "Origin");
  myHeaders.append("Host", `${import.meta.env.PUBLIC_URL}`);

  const requestOptions = {
    method: 'GET',
    headers: myHeaders,
    redirect: 'follow'
  };
  let resp = {};
  let indicador = '';

  switch (tipo) {
    case 'produccion':
      titulo.innerHTML = 'Historico de la Producción';
      descripcion.innerHTML = `Muestra de los cambios en la producción con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/producciones/historico/`, requestOptions);
      indicador = 'idProduccion';
      break;
    case 'material':
      titulo.innerHTML = 'Historico del Material';
      descripcion.innerHTML = `Muestra de los cambios en el material con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/materiales/historico/`, requestOptions);
      indicador = 'Lote';
      break;
    case 'transporte':
      titulo.innerHTML = 'Historico del Transporte';
      descripcion.innerHTML = `Muestra de los cambios en el transporte con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/transportes/historico/`, requestOptions);
      indicador = 'idTransporte';
      break;
    case 'distribucion':
      titulo.innerHTML = 'Historico de la distribución';
      descripcion.innerHTML = `Muestra de los cambios en la distribución con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/distribuciones/historico/`, requestOptions);
      indicador = 'idDistribucion';
      break;
    case 'distribuidor':
      titulo.innerHTML = 'Historico del distribuidor';
      descripcion.innerHTML = `Muestra de los cambios en el distribuidor con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/distribuidores/historico/`, requestOptions);
      indicador = 'idDistribuidor';
      break;
    case 'tequila':
      titulo.innerHTML = 'Historico del tequila';
      descripcion.innerHTML = `Muestra de los cambios en el tequila con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/tequilas/historico/`, requestOptions);
      indicador = 'lote';
      break;
    default:
      break;
  }

  const respuesta = await resp.json();

  const json = respuesta.respuesta;
  console.log(json);
  const names = [];

  for (const name in json[json.length - 1].data)
    if (Object.hasOwnProperty.call(json[json.length - 1].data, name))
      names.push(name);
  
  const chart = am4core.create("chartdiv", am4plugins_forceDirected.ForceDirectedTree);
  // Create series

  let series = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries())

  const jsonChildrens = json.map(jsonU => {
    return names.map(name => {
      return {
        "name": name,
        "collapsed": true,
        "value": 0.5,
        "valorPropio": jsonU.data[name],
      }
    });
  });

  const json2 = jsonChildrens.map((jsonU, index) => {
    return {
          "name": `Versión ${json[index].metadata.version}`, 
          "valorPropio": json[index].data[indicador],
          "value": 0.75,
          "collapsed": true,
          "children": jsonChildrens[index]
        }
  });

  // Set data
  series.data = [{
    "name": 'bloque',
    "valorPropio": json[0].metadata.id,
    "collapsed": false,
    "value": 1,
    "children": json2
  }];

  // Set up data fields
  series.dataFields.value = "value";
  series.dataFields.name = "name";
  series.dataFields.children = "children";
  series.dataFields.collapsed = "collapsed";

  // Add labels
  series.nodes.template.label.text = "{valorPropio}";
  series.nodes.template.tooltipText = "{name}: {valorPropio}";
  series.nodes.template.label.truncate = true;
  series.fontSize = 16;
  series.maxRadius = 60;
  series.minRadius = 20;
  series.links.template.strokeWidth = 5;

  hideLoader();
</script>

<style>
  #chartdiv{
    height: 50vh;
  }
</style>