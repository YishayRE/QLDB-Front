---
import NoLoginLayout from '../layouts/NoLoginLayout.astro'
---

<NoLoginLayout title="Messages">
  <section>
    <h1>Historico de Materiales</h1><br>
    <p class="size-20">Muestra de los cambios en el material F1WQ3Idumg05KV2JbXzcEC.</p>
  </section>
  <section class="margin-32">
    <div id="chartdiv" style="width: 100%;">
    </div>
  </section>
</NoLoginLayout>

<script is:inline src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/plugins/forceDirected.js"></script>
<script>
  const params = window.location.search;

  const id = params.split('=');

  const myHeaders = new Headers();
  myHeaders.append("id", id[1]);
  myHeaders.append("Access-Control-Allow-Origin", "*");
  myHeaders.append("Access-Control-Allow-Credentials", "true");
  myHeaders.append("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  myHeaders.append("Vary", "Origin");
  myHeaders.append("Host", `${import.meta.env.PUBLIC_URL}`);

  const requestOptions = {
    method: 'GET',
    headers: myHeaders,
    redirect: 'follow'
  };

  const resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/materiales/historico/`, requestOptions);
  const respuesta = await resp.json();

  const json = respuesta.respuesta;
  console.log(json);

  const chart = am4core.create("chartdiv", am4plugins_forceDirected.ForceDirectedTree);
  // Create series
  let series = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries())

  const jsonChildrens = json.map(jsonU => {
    return [
      {
        "name": "Nombre",
        "value": 0.5,
        "valorPropio": jsonU.data.Nombre
      },
      {
        "name": "Fecha de Recolección",
        "value": 0.5,
        "valorPropio": jsonU.data.FechaRecoleccion
      },
      {
        "name": "Cantidad",
        "value": 0.5,
        "valorPropio": jsonU.data.Cantidad
      },
      {
        "name": "Origen",
        "value": 0.5,
        "valorPropio": jsonU.data.Origen
      }
    ]
  });

  const json2 = jsonChildrens.map((jsonU, index) => {
    return {
          "name": `Versión ${json[index].metadata.version}`, 
          "valorPropio": json[index].data.Lote,
          "value": 0.75,
          "collapsed": false,
          "children": jsonChildrens[index]
        }
  });

  // Set data
  series.data = [{
    "name": json[0].data.Nombre,
    "valorPropio": json[0].metadata.id,
    "value": 1,
    "children": json2
  }];

  // Set up data fields
  series.dataFields.value = "value";
  series.dataFields.name = "name";
  series.dataFields.children = "children";

  // Add labels
  series.nodes.template.label.text = "{valorPropio}";
  series.nodes.template.tooltipText = "{name}: {valorPropio}";
  series.nodes.template.label.truncate = true;
  series.fontSize = 16;
  series.maxRadius = 60;
  series.minRadius = 20;
  series.links.template.strokeWidth = 5;

  hideLoader();
</script>

<style>
  #chartdiv{
    height: 50vh;
  }
</style>