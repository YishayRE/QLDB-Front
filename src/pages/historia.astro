---
import NoLoginLayout from '../layouts/NoLoginLayout.astro'
---

<NoLoginLayout title="Historia">
  <section>
    <h1 id="titulo">Historico con error</h1><br>
    <p id="descripcion" class="size-20">Error</p>
  </section>
  <section class="margin-32">
    <div id="chartdiv" style="width: 100%;">
    </div>
  </section>
</NoLoginLayout>

<script is:inline src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script is:inline src="https://cdn.amcharts.com/lib/4/plugins/forceDirected.js"></script>
<script>
  const titulo = document.getElementById('titulo');
  const descripcion = document.getElementById('descripcion');
  const params = window.location.search;
  const param = params.split('&');
  const id = param[0].split('=')[1];
  const tipo = param[1].split('=')[1];
  console.log(id, tipo);

  const myHeaders = new Headers();
  myHeaders.append("id", id);
  myHeaders.append("Access-Control-Allow-Origin", "*");
  myHeaders.append("Access-Control-Allow-Credentials", "true");
  myHeaders.append("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  myHeaders.append("Vary", "Origin");
  myHeaders.append("Host", `${import.meta.env.PUBLIC_URL}`);

  const requestOptions = {
    method: 'GET',
    headers: myHeaders,
    redirect: 'follow'
  };
  let resp = {};

  switch (tipo) {
    case 'material':
      titulo.innerHTML = 'Historia del Material';
      descripcion.innerHTML = `Muestra el proceso del material con bloque ${id}.`;
      resp = await fetch(`${import.meta.env.PUBLIC_API_URL}/materiales/historia/`, requestOptions);
      break;
    default:
      break;
  }

  const {material, transporte, produccion, distribucion, distribuidor, tequila} = await resp.json();

  const namesM = [];
  const namesT = [];
  const namesP = [];
  const namesD = [];
  const namesDr = [];
  const namesTq = [];

  for (const name in material.data)
    if (Object.hasOwnProperty.call(material.data, name))
      namesM.push(name);

  for (const name in transporte.data)
    if (Object.hasOwnProperty.call(transporte.data, name))
      namesT.push(name);

  for (const name in produccion.data)
    if (Object.hasOwnProperty.call(produccion.data, name))
      namesP.push(name);

  for (const name in distribucion.data)
    if (Object.hasOwnProperty.call(distribucion.data, name))
      namesD.push(name);
    
  for (const name in distribuidor.data)
    if (Object.hasOwnProperty.call(distribuidor.data, name))
      namesDr.push(name);
  
  for (const name in tequila.data)
    if (Object.hasOwnProperty.call(tequila.data, name))
      namesTq.push(name);

  const chart = am4core.create("chartdiv", am4plugins_forceDirected.ForceDirectedTree);
  // Create series

  let series = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries())

  const mat = namesM.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": material.data[name],
    }
  });

  const tran = namesT.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": transporte.data[name],
    }
  });

  const prod = namesP.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": produccion.data[name],
    }
  });

  const dist = namesD.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": distribucion.data[name],
    }
  });

  const distr = namesDr.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": distribuidor.data[name],
    }
  });

  const teq = namesTq.map(name => {
    return {
      "name": name,
      "collapsed": true,
      "value": 0.75,
      "valorPropio": tequila.data[name],
    }
  });

  const bloqueM = {
    "name": 'bloque',
    "valorPropio": material.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const bloqueT = {
    "name": 'bloque',
    "valorPropio": transporte.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const bloqueP = {
    "name": 'bloque',
    "valorPropio": produccion.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const bloqueD = {
    "name": 'bloque',
    "valorPropio": distribucion.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const bloqueDr = {
    "name": 'bloque',
    "valorPropio": distribuidor.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const bloqueTq = {
    "name": 'bloque',
    "valorPropio": tequila.metadata.id,
    "collapsed": true,
    "value": 0.75,
  }

  const materialC = {
    "id": "Material",
    "name": 'Nombre',
    "x": am4core.percent(20),
    "y": am4core.percent(70),  
    "collapsed": true,
    "fixed": true,
    "valorPropio": 'Material',
    "value": 1,
    "link": ["Transporte", "Produccion"],
    "children": [...mat, bloqueM]
  }

  const transporteC = {
    "id": "Transporte",
    "name": 'Nombre',
    "x": am4core.percent(22),
    "y": am4core.percent(28),
    "fixed": true,
    "valorPropio": 'Transporte',
    "collapsed": true,
    "value": 1,
    "link": ["Material", "Producci√≥n"],
    "children": [...tran, bloqueT]
  }

  const produccionC = {
    "id": "Produccion",
    "name": 'Nombre',
    "x": am4core.percent(35),
    "y": am4core.percent(50),
    "valorPropio": 'Produccion',
    "fixed": true,
    "collapsed": true,
    "value": 1,
    "link": ["Material", "Distribucion", "Transporte"],
    "children": [...prod, bloqueP]
  }

  const distribucionC = {
    "id": "Distribucion",
    "name": 'Nombre',
    "x": am4core.percent(50),
    "y": am4core.percent(40),
    "valorPropio": 'Distribucion',
    "fixed": true,
    "collapsed": true,
    "value": 1,
    "link": ["Produccion", "Distribuidor"],
    "children": [...dist, bloqueD]
  }

  const distribuidorC = {
    "id": "Distribuidor",
    "name": 'Nombre',
    "x": am4core.percent(65),
    "y": am4core.percent(50),
    "valorPropio": 'Distribuidor',
    "fixed": true,
    "collapsed": true,
    "value": 1,
    "link": ["Dsitrubucion", "Tequila"],
    "children": [...distr, bloqueDr]
  }

  const tequilaC = {
    "id": "Tequila",
    "name": 'Nombre',
    "x": am4core.percent(80),
    "y": am4core.percent(70),
    "valorPropio": 'Tequila',
    "collapsed": true,
    "fixed": true,
    "value": 1,
    "link": ["Distribuidor"],
    "children": [...teq, bloqueTq]
  }

  // Set data
  series.data = [materialC, transporteC, produccionC, distribucionC, distribuidorC, tequilaC];

  // Set up data fields
  series.dataFields.value = "value";
  series.dataFields.name = "name";
  series.dataFields.children = "children";
  series.dataFields.collapsed = "collapsed";
  series.dataFields.id = "id";
  series.dataFields.linkWith = "link";

  // Add labels
  series.nodes.template.label.text = "{valorPropio}";
  series.nodes.template.tooltipText = "{name}: {valorPropio}";
  series.nodes.template.label.truncate = true;
  series.fontSize = 16;
  series.maxRadius = 60;
  series.minRadius = 20;
  series.links.template.strokeWidth = 5;
  series.dataFields.fixed = "fixed";
  series.nodes.template.propertyFields.x = "x";
  series.nodes.template.propertyFields.y = "y";

  hideLoader();
</script>

<style>
  #chartdiv{
    height: 75vh;
  }
</style>